/*
 * Copyright (c) 2022 Linus Andera
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published
 *     by the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

targetCompatibility = JavaVersion.VERSION_11
sourceCompatibility = JavaVersion.VERSION_11

archivesBaseName = 'lapi-annotation-processor'
version = '1.0.0'
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.encoding = 'UTF-8'
}

publishing {
    repositories {
        maven {
            if(project.hasProperty("ossrhUsername") && project.hasProperty("ossrhPassword")){
                name = "OSSRH"
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
                project.logger.lifecycle("OSSRH username and password given. CAN deploy.")
            }else {
                project.logger.lifecycle("no OSSRH username and password given. CANNOT deploy.")
            }
        }

        maven {
            if(project.hasProperty("githubUsername") && project.hasProperty("githubToken")){
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/lni-dev/lapi")
                credentials {
                    username = githubUsername
                    password = githubToken
                }
                project.logger.lifecycle("github username and token given. CAN publish package.")
            }else {
                project.logger.lifecycle("no github username and token given. CANNOT publish package.")
            }
        }
    }

    publications {

        annoProcessor(MavenPublication) {
            artifactId = project.archivesBaseName
            from components.java
            pom {
                name = 'LApi Annotation Processor'
                description = 'Annotation Processor for LApi'
                url = 'https://lni-dev.github.io/'
                groupId = 'io.github.lni-dev'
                version = project.version

                licenses {
                    license {
                        name = 'GNU Affero General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'linusdev'
                        name = 'Linus Andera'
                        email = 'einsuperlinus@gmail.com'
                        organizationUrl = 'https://lni-dev.github.io/'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/lni-dev/lapi-annotation-processor.git'
                    developerConnection ='scm:git:ssh://github.com:lni-dev/lapi-annotation-processor.git'
                    url = 'http://github.com/lni-dev/lapi-annotation-processor/tree/master'
                }
            }
        }
    }
}

signing {
    if(project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")){
        sign publishing.publications.annoProcessor
        project.logger.lifecycle("Signing information given. SIGNING.")
    }else {
        project.logger.lifecycle("No Signing information given. CANNOT sign.")
    }
}
